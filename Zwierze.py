from Organizm import Organizmfrom random import randintclass Zwierze (Organizm):	def __init__(self):		super(Zwierze, self).__init__()	def kolizja(self, atakujacy, obronca):		if isinstance(atakujacy, type(obronca)):			self.rozmnazanie(atakujacy, obronca)			return		x = atakujacy.getPolozenieX()		y = atakujacy.getPolozenieY()		x_obr = obronca.getPolozenieX()		y_obr = obronca.getPolozenieY()		if atakujacy.getSila() >= obronca.getSila():			atakujacy.swiat.usunZKolejki(x_obr, y_obr)			atakujacy.swiat.organizmy[x_obr][y_obr] = None			atakujacy.swiat.organizmy[x_obr][y_obr] = atakujacy			atakujacy.swiat.organizmy[x_obr][y_obr].setPolozenieX(x_obr)			atakujacy.swiat.organizmy[x_obr][y_obr].setPolozenieY(y_obr)			atakujacy.swiat.organizmy[x][y] = None			return		elif atakujacy.getSila() < obronca.getSila():			obronca.swiat.usunZKolejki(x, y)			obronca.swiat.organizmy[x][y] = None			return	def akcja(self):		while 1:			x_t = self.polozenie_x			y_t = self.polozenie_y			kierunek = randint(0, 1)			zwrot = randint(0, 1)			if kierunek == 0:				if zwrot == 0:					x_t += 1				else:					x_t -= 1			else:				if zwrot == 0:					y_t += 1				else:					y_t -= 1			if self.wykonajRuch(x_t, y_t) is True:				return	def wykonajRuch(self, x, y):		if 0 <= x < self.swiat.getRozmiarPlanszy()[0] and 0 <= y < self.swiat.getRozmiarPlanszy()[1]:			if self.swiat.organizmy[x][y] is None:				self.swiat.organizmy[x][y] = self				self.swiat.organizmy[self.getPolozenieX()][self.getPolozenieY()] = None				self.setPolozenieX(x)				self.setPolozenieY(y)				return True			else:				self.swiat.organizmy[x][y].kolizja(self, self.swiat.organizmy[x][y])				return True		return False	def rozmnazanie(self, organizm1, organizm2):		wolne_pola = []		super(Zwierze, self).szukajWolnychPol(organizm1, wolne_pola)		super(Zwierze, self).szukajWolnychPol(organizm2, wolne_pola)		ilosc_pol = len(wolne_pola)		index = randint(0, ilosc_pol - 1)		pole = wolne_pola[index]		self.swiat.dodajOrganizm(pole, type(organizm1))